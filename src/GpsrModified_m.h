//
// Generated file, do not edit! Created by nedtool 5.6 from GpsrModified.msg.
//

#ifndef __INET_GPSRMODIFIED_M_H
#define __INET_GPSRMODIFIED_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif


namespace inet {

class GpsrBeaconModified;
class GpsrOption;
} // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/TlvOptions_m.h" // import inet.common.TlvOptions

#include "inet/common/geometry/Geometry_m.h" // import inet.common.geometry.Geometry

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

#include "inet/networklayer/common/L3Address_m.h" // import inet.networklayer.common.L3Address

// cplusplus {{
#include "GpsrModifiedDefs.h"
// }}


namespace inet {

/**
 * Enum generated from <tt>GpsrModified.msg:32</tt> by nedtool.
 * <pre>
 * enum GpsrForwardingMode
 * {
 *     GPSR_GREEDY_ROUTING = 1;
 *     GPSR_PERIMETER_ROUTING = 2;
 * }
 * </pre>
 */
enum GpsrForwardingMode {
    GPSR_GREEDY_ROUTING = 1,
    GPSR_PERIMETER_ROUTING = 2
};

/**
 * Enum generated from <tt>GpsrModified.msg:37</tt> by nedtool.
 * <pre>
 * enum GpsrPlanarizationMode
 * {
 *     GPSR_NO_PLANARIZATION = 0;
 *     GPSR_GG_PLANARIZATION = 1;
 *     GPSR_RNG_PLANARIZATION = 2;
 * }
 * </pre>
 */
enum GpsrPlanarizationMode {
    GPSR_NO_PLANARIZATION = 0,
    GPSR_GG_PLANARIZATION = 1,
    GPSR_RNG_PLANARIZATION = 2
};

/**
 * Class generated from <tt>GpsrModified.msg:48</tt> by nedtool.
 * <pre>
 * //
 * // The GPSR beacon packet is sent periodically by all GPSR routers to notify
 * // the neighbors about the router's address and position.
 * //
 * class GpsrBeaconModified extends FieldsChunk
 * {
 *     L3Address address;
 *     Coord position;
 * }
 * </pre>
 */
class GpsrBeaconModified : public ::inet::FieldsChunk
{
  protected:
    L3Address address;
    Coord position;

  private:
    void copy(const GpsrBeaconModified& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const GpsrBeaconModified&);

  public:
    GpsrBeaconModified();
    GpsrBeaconModified(const GpsrBeaconModified& other);
    virtual ~GpsrBeaconModified();
    GpsrBeaconModified& operator=(const GpsrBeaconModified& other);
    virtual GpsrBeaconModified *dup() const override {return new GpsrBeaconModified(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const L3Address& getAddress() const;
    virtual L3Address& getAddressForUpdate() { handleChange();return const_cast<L3Address&>(const_cast<GpsrBeaconModified*>(this)->getAddress());}
    virtual void setAddress(const L3Address& address);
    virtual const Coord& getPosition() const;
    virtual Coord& getPositionForUpdate() { handleChange();return const_cast<Coord&>(const_cast<GpsrBeaconModified*>(this)->getPosition());}
    virtual void setPosition(const Coord& position);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const GpsrBeaconModified& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, GpsrBeaconModified& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>GpsrModified.msg:59</tt> by nedtool.
 * <pre>
 * //
 * // The GPSROption is used to add extra routing information for network datagrams.
 * //
 * // For more information, see the GPSR paper
 * // http://www.eecs.harvard.edu/~htk/publication/2000-mobi-karp-kung.pdf
 * //
 * class GpsrOption extends TlvOptionBase
 * {
 *     GpsrForwardingMode routingMode;
 *     Coord destinationPosition;               // D
 *     Coord perimeterRoutingStartPosition;     // Lp
 *     Coord perimeterRoutingForwardPosition;   // Lf
 *     L3Address currentFaceFirstSenderAddress;   // e0
 *     L3Address currentFaceFirstReceiverAddress; // e0
 *     L3Address senderAddress; // TODO: this field is not strictly needed by GPSR (should be eliminated)
 *     //////////////////////////////////////////////////////////////////////////
 *     // Record Hop Count Signal (Musab)
 *     //////////////////////////////////////////////////////////////////////////
 *     unsigned int hopCount;    // The number of hops traversed by each application message.
 * }
 * </pre>
 */
class GpsrOption : public ::inet::TlvOptionBase
{
  protected:
    inet::GpsrForwardingMode routingMode = static_cast<inet::GpsrForwardingMode>(-1);
    Coord destinationPosition;
    Coord perimeterRoutingStartPosition;
    Coord perimeterRoutingForwardPosition;
    L3Address currentFaceFirstSenderAddress;
    L3Address currentFaceFirstReceiverAddress;
    L3Address senderAddress;
    unsigned int hopCount = 0;

  private:
    void copy(const GpsrOption& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const GpsrOption&);

  public:
    GpsrOption();
    GpsrOption(const GpsrOption& other);
    virtual ~GpsrOption();
    GpsrOption& operator=(const GpsrOption& other);
    virtual GpsrOption *dup() const override {return new GpsrOption(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual inet::GpsrForwardingMode getRoutingMode() const;
    virtual void setRoutingMode(inet::GpsrForwardingMode routingMode);
    virtual const Coord& getDestinationPosition() const;
    virtual Coord& getDestinationPositionForUpdate() { return const_cast<Coord&>(const_cast<GpsrOption*>(this)->getDestinationPosition());}
    virtual void setDestinationPosition(const Coord& destinationPosition);
    virtual const Coord& getPerimeterRoutingStartPosition() const;
    virtual Coord& getPerimeterRoutingStartPositionForUpdate() { return const_cast<Coord&>(const_cast<GpsrOption*>(this)->getPerimeterRoutingStartPosition());}
    virtual void setPerimeterRoutingStartPosition(const Coord& perimeterRoutingStartPosition);
    virtual const Coord& getPerimeterRoutingForwardPosition() const;
    virtual Coord& getPerimeterRoutingForwardPositionForUpdate() { return const_cast<Coord&>(const_cast<GpsrOption*>(this)->getPerimeterRoutingForwardPosition());}
    virtual void setPerimeterRoutingForwardPosition(const Coord& perimeterRoutingForwardPosition);
    virtual const L3Address& getCurrentFaceFirstSenderAddress() const;
    virtual L3Address& getCurrentFaceFirstSenderAddressForUpdate() { return const_cast<L3Address&>(const_cast<GpsrOption*>(this)->getCurrentFaceFirstSenderAddress());}
    virtual void setCurrentFaceFirstSenderAddress(const L3Address& currentFaceFirstSenderAddress);
    virtual const L3Address& getCurrentFaceFirstReceiverAddress() const;
    virtual L3Address& getCurrentFaceFirstReceiverAddressForUpdate() { return const_cast<L3Address&>(const_cast<GpsrOption*>(this)->getCurrentFaceFirstReceiverAddress());}
    virtual void setCurrentFaceFirstReceiverAddress(const L3Address& currentFaceFirstReceiverAddress);
    virtual const L3Address& getSenderAddress() const;
    virtual L3Address& getSenderAddressForUpdate() { return const_cast<L3Address&>(const_cast<GpsrOption*>(this)->getSenderAddress());}
    virtual void setSenderAddress(const L3Address& senderAddress);
    virtual unsigned int getHopCount() const;
    virtual void setHopCount(unsigned int hopCount);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const GpsrOption& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, GpsrOption& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_GPSRMODIFIED_M_H

